/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  GPv2Signing,
  GPv2SigningInterface,
} from "../../../cowProtocol/mixins/GPv2Signing";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "orderUid",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "signed",
        type: "bool",
      },
    ],
    name: "PreSignature",
    type: "event",
  },
  {
    inputs: [],
    name: "domainSeparator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "preSignature",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "orderUid",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "signed",
        type: "bool",
      },
    ],
    name: "setPreSignature",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class GPv2Signing__factory {
  static readonly abi = _abi;
  static createInterface(): GPv2SigningInterface {
    return new utils.Interface(_abi) as GPv2SigningInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GPv2Signing {
    return new Contract(address, _abi, signerOrProvider) as GPv2Signing;
  }
}
